<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ekip İş Takip Panosu</title>
    <style>
        :root {
            --primary-color: #4a6fa5;
            --secondary-color: #6b8cbc;
            --light-color: #f5f7fa;
            --dark-color: #2c3e50;
            --success-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: var(--light-color);
            color: var(--dark-color);
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background-color: white;
            padding: 20px;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        h1 {
            color: var(--primary-color);
            font-size: 28px;
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--secondary-color);
        }
        
        .kanban-board {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .column {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 15px;
        }
        
        .column-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .column-title {
            font-size: 18px;
            font-weight: 600;
        }
        
        .task-count {
            background-color: var(--light-color);
            color: var(--dark-color);
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 14px;
        }
        
        .task-list {
            min-height: 400px;
        }
        
        .task {
            background-color: var(--light-color);
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            cursor: pointer;
            transition: transform 0.2s ease;
        }
        
        .task:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .task-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .task-title {
            font-weight: 600;
            font-size: 16px;
        }
        
        .task-priority {
            padding: 3px 8px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .priority-high {
            background-color: var(--danger-color);
            color: white;
        }
        
        .priority-medium {
            background-color: var(--warning-color);
            color: white;
        }
        
        .priority-low {
            background-color: var(--success-color);
            color: white;
        }
        
        .task-description {
            font-size: 14px;
            color: #666;
            margin-bottom: 10px;
        }
        
        .task-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: #888;
        }
        
        .task-assignee {
            display: flex;
            align-items: center;
        }
        
        .avatar {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-right: 5px;
            font-size: 12px;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        
        .modal-content {
            background-color: white;
            border-radius: var(--border-radius);
            width: 90%;
            max-width: 500px;
            padding: 30px;
            box-shadow: var(--box-shadow);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #888;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            font-size: 14px;
        }
        
        textarea {
            min-height: 100px;
            resize: vertical;
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }
        
        .btn-secondary {
            background-color: #e0e0e0;
            color: var(--dark-color);
        }
        
        .btn-secondary:hover {
            background-color: #d0d0d0;
        }
        
        .empty-state {
            text-align: center;
            padding: 30px;
            color: #888;
        }
        
        @media (max-width: 768px) {
            .kanban-board {
                grid-template-columns: 1fr;
            }
            
            header {
                flex-direction: column;
                gap: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Ekip İş Takip Panosu</h1>
            <button class="btn btn-primary" id="addTaskBtn">Yeni Görev Ekle</button>
        </header>
        
        <div class="kanban-board">
            <div class="column">
                <div class="column-header">
                    <div class="column-title">Yapılacaklar</div>
                    <div class="task-count" id="todo-count">0</div>
                </div>
                <div class="task-list" id="todo-tasks">
                    <!-- Görevler buraya eklenecek -->
                </div>
            </div>
            
            <div class="column">
                <div class="column-header">
                    <div class="column-title">Devam Edenler</div>
                    <div class="task-count" id="inprogress-count">0</div>
                </div>
                <div class="task-list" id="inprogress-tasks">
                    <!-- Görevler buraya eklenecek -->
                </div>
            </div>
            
            <div class="column">
                <div class="column-header">
                    <div class="column-title">Tamamlananlar</div>
                    <div class="task-count" id="done-count">0</div>
                </div>
                <div class="task-list" id="done-tasks">
                    <!-- Görevler buraya eklenecek -->
                </div>
            </div>
        </div>
    </div>
    
    <!-- Görev Ekleme/ Düzenleme Modalı -->
    <div class="modal" id="taskModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Yeni Görev Ekle</h2>
                <button class="close-btn" id="closeModalBtn">&times;</button>
            </div>
            <form id="taskForm">
                <input type="hidden" id="taskId">
                <div class="form-group">
                    <label for="taskTitle">Görev Başlığı</label>
                    <input type="text" id="taskTitle" required>
                </div>
                <div class="form-group">
                    <label for="taskDescription">Açıklama</label>
                    <textarea id="taskDescription"></textarea>
                </div>
                <div class="form-group">
                    <label for="taskPriority">Öncelik</label>
                    <select id="taskPriority">
                        <option value="low">Düşük</option>
                        <option value="medium">Orta</option>
                        <option value="high">Yüksek</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="taskAssignee">Atanan Kişi</label>
                    <select id="taskAssignee">
                        <option value="ahmet">Ahmet</option>
                        <option value="mehmet">Mehmet</option>
                        <option value="ayşe">Ayşe</option>
                        <option value="fatma">Fatma</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="taskDueDate">Son Tarih</label>
                    <input type="date" id="taskDueDate">
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="cancelBtn">İptal</button>
                    <button type="submit" class="btn btn-primary">Kaydet</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Örnek görev verileri
        let tasks = [
            {
                id: 1,
                title: "Proje planını tamamla",
                description: "Yeni proje için detaylı plan oluştur",
                priority: "high",
                assignee: "ahmet",
                dueDate: "2023-12-15",
                status: "todo"
            },
            {
                id: 2,
                title: "Tasarım mockupları hazırla",
                description: "Kullanıcı arayüzü için mockuplar oluştur",
                priority: "medium",
                assignee: "ayşe",
                dueDate: "2023-12-20",
                status: "inprogress"
            },
            {
                id: 3,
                title: "API entegrasyonu",
                description: "Backend API ile frontend entegrasyonu",
                priority: "medium",
                assignee: "mehmet",
                dueDate: "2023-12-25",
                status: "todo"
            },
            {
                id: 4,
                title: "Test senaryoları yaz",
                description: "Tüm modüller için test senaryoları oluştur",
                priority: "low",
                assignee: "fatma",
                dueDate: "2023-12-18",
                status: "done"
            }
        ];

        // DOM elementleri
        const addTaskBtn = document.getElementById('addTaskBtn');
        const taskModal = document.getElementById('taskModal');
        const closeModalBtn = document.getElementById('closeModalBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        const taskForm = document.getElementById('taskForm');
        const modalTitle = document.getElementById('modalTitle');
        
        const todoTasks = document.getElementById('todo-tasks');
        const inprogressTasks = document.getElementById('inprogress-tasks');
        const doneTasks = document.getElementById('done-tasks');
        
        const todoCount = document.getElementById('todo-count');
        const inprogressCount = document.getElementById('inprogress-count');
        const doneCount = document.getElementById('done-count');

        // Modal açma/kapama işlevleri
        addTaskBtn.addEventListener('click', () => {
            openModal();
        });

        closeModalBtn.addEventListener('click', () => {
            closeModal();
        });

        cancelBtn.addEventListener('click', () => {
            closeModal();
        });

        // Modal dışına tıklanırsa kapat
        window.addEventListener('click', (e) => {
            if (e.target === taskModal) {
                closeModal();
            }
        });

        // Form gönderimi
        taskForm.addEventListener('submit', (e) => {
            e.preventDefault();
            saveTask();
        });

        // Modal açma fonksiyonu
        function openModal(task = null) {
            if (task) {
                // Görev düzenleme modu
                modalTitle.textContent = 'Görevi Düzenle';
                document.getElementById('taskId').value = task.id;
                document.getElementById('taskTitle').value = task.title;
                document.getElementById('taskDescription').value = task.description;
                document.getElementById('taskPriority').value = task.priority;
                document.getElementById('taskAssignee').value = task.assignee;
                document.getElementById('taskDueDate').value = task.dueDate;
            } else {
                // Yeni görev modu
                modalTitle.textContent = 'Yeni Görev Ekle';
                taskForm.reset();
                document.getElementById('taskId').value = '';
            }
            taskModal.style.display = 'flex';
        }

        // Modal kapama fonksiyonu
        function closeModal() {
            taskModal.style.display = 'none';
        }

        // Görev kaydetme fonksiyonu
        function saveTask() {
            const taskId = document.getElementById('taskId').value;
            const title = document.getElementById('taskTitle').value;
            const description = document.getElementById('taskDescription').value;
            const priority = document.getElementById('taskPriority').value;
            const assignee = document.getElementById('taskAssignee').value;
            const dueDate = document.getElementById('taskDueDate').value;

            if (taskId) {
                // Mevcut görevi güncelle
                const index = tasks.findIndex(task => task.id == taskId);
                if (index !== -1) {
                    tasks[index] = {
                        ...tasks[index],
                        title,
                        description,
                        priority,
                        assignee,
                        dueDate
                    };
                }
            } else {
                // Yeni görev oluştur
                const newTask = {
                    id: Date.now(),
                    title,
                    description,
                    priority,
                    assignee,
                    dueDate,
                    status: 'todo'
                };
                tasks.push(newTask);
            }

            closeModal();
            renderTasks();
        }

        // Görevleri render etme fonksiyonu
        function renderTasks() {
            // Görev listelerini temizle
            todoTasks.innerHTML = '';
            inprogressTasks.innerHTML = '';
            doneTasks.innerHTML = '';

            // Görev sayılarını sıfırla
            let todoCounter = 0;
            let inprogressCounter = 0;
            let doneCounter = 0;

            // Görevleri duruma göre filtrele ve ekrana yazdır
            tasks.forEach(task => {
                const taskElement = createTaskElement(task);
                
                if (task.status === 'todo') {
                    todoTasks.appendChild(taskElement);
                    todoCounter++;
                } else if (task.status === 'inprogress') {
                    inprogressTasks.appendChild(taskElement);
                    inprogressCounter++;
                } else if (task.status === 'done') {
                    doneTasks.appendChild(taskElement);
                    doneCounter++;
                }
            });

            // Görev sayılarını güncelle
            todoCount.textContent = todoCounter;
            inprogressCount.textContent = inprogressCounter;
            doneCount.textContent = doneCounter;

            // Eğer sütun boşsa boş durum mesajı göster
            if (todoCounter === 0) {
                todoTasks.innerHTML = '<div class="empty-state">Henüz görev eklenmemiş</div>';
            }
            
            if (inprogressCounter === 0) {
                inprogressTasks.innerHTML = '<div class="empty-state">Devam eden görev yok</div>';
            }
            
            if (doneCounter === 0) {
                doneTasks.innerHTML = '<div class="empty-state">Tamamlanan görev yok</div>';
            }
        }

        // Görev elementi oluşturma fonksiyonu
        function createTaskElement(task) {
            const taskDiv = document.createElement('div');
            taskDiv.className = 'task';
            taskDiv.setAttribute('data-id', task.id);
            
            // Öncelik sınıfını belirle
            let priorityClass = '';
            let priorityText = '';
            switch(task.priority) {
                case 'high':
                    priorityClass = 'priority-high';
                    priorityText = 'Yüksek';
                    break;
                case 'medium':
                    priorityClass = 'priority-medium';
                    priorityText = 'Orta';
                    break;
                case 'low':
                    priorityClass = 'priority-low';
                    priorityText = 'Düşük';
                    break;
            }
            
            // Atanan kişinin adını belirle
            let assigneeName = '';
            switch(task.assignee) {
                case 'ahmet':
                    assigneeName = 'Ahmet';
                    break;
                case 'mehmet':
                    assigneeName = 'Mehmet';
                    break;
                case 'ayşe':
                    assigneeName = 'Ayşe';
                    break;
                case 'fatma':
                    assigneeName = 'Fatma';
                    break;
            }
            
            // Tarihi formatla
            const dueDate = task.dueDate ? new Date(task.dueDate).toLocaleDateString('tr-TR') : 'Belirtilmemiş';
            
            taskDiv.innerHTML = `
                <div class="task-header">
                    <div class="task-title">${task.title}</div>
                    <div class="task-priority ${priorityClass}">${priorityText}</div>
                </div>
                <div class="task-description">${task.description}</div>
                <div class="task-footer">
                    <div class="task-assignee">
                        <div class="avatar">${assigneeName.charAt(0)}</div>
                        <span>${assigneeName}</span>
                    </div>
                    <div class="task-due-date">${dueDate}</div>
                </div>
            `;
            
            // Görev tıklanabilir yap
            taskDiv.addEventListener('click', () => {
                openModal(task);
            });
            
            return taskDiv;
        }

        // Sayfa yüklendiğinde görevleri render et
        document.addEventListener('DOMContentLoaded', () => {
            renderTasks();
        });
    </script>
</body>
</html>
